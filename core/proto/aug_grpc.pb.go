// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: aug.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateAugmentorClient is the client API for TemplateAugmentor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateAugmentorClient interface {
	Id(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IdResponse, error)
	Augment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type templateAugmentorClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateAugmentorClient(cc grpc.ClientConnInterface) TemplateAugmentorClient {
	return &templateAugmentorClient{cc}
}

func (c *templateAugmentorClient) Id(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/proto.TemplateAugmentor/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateAugmentorClient) Augment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.TemplateAugmentor/Augment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateAugmentorServer is the server API for TemplateAugmentor service.
// All implementations must embed UnimplementedTemplateAugmentorServer
// for forward compatibility
type TemplateAugmentorServer interface {
	Id(context.Context, *Empty) (*IdResponse, error)
	Augment(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedTemplateAugmentorServer()
}

// UnimplementedTemplateAugmentorServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateAugmentorServer struct {
}

func (UnimplementedTemplateAugmentorServer) Id(context.Context, *Empty) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (UnimplementedTemplateAugmentorServer) Augment(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Augment not implemented")
}
func (UnimplementedTemplateAugmentorServer) mustEmbedUnimplementedTemplateAugmentorServer() {}

// UnsafeTemplateAugmentorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateAugmentorServer will
// result in compilation errors.
type UnsafeTemplateAugmentorServer interface {
	mustEmbedUnimplementedTemplateAugmentorServer()
}

func RegisterTemplateAugmentorServer(s grpc.ServiceRegistrar, srv TemplateAugmentorServer) {
	s.RegisterService(&TemplateAugmentor_ServiceDesc, srv)
}

func _TemplateAugmentor_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateAugmentorServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TemplateAugmentor/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateAugmentorServer).Id(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateAugmentor_Augment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateAugmentorServer).Augment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TemplateAugmentor/Augment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateAugmentorServer).Augment(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateAugmentor_ServiceDesc is the grpc.ServiceDesc for TemplateAugmentor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateAugmentor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TemplateAugmentor",
	HandlerType: (*TemplateAugmentorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Id",
			Handler:    _TemplateAugmentor_Id_Handler,
		},
		{
			MethodName: "Augment",
			Handler:    _TemplateAugmentor_Augment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aug.proto",
}
